//
// File generated by rootcint at Fri May 25 17:33:42 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME output
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "output.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SLHAline SLHAline;
      #else
      class SLHAline  {
         public:
         //friend XX;
         unsigned int mIndexInfo; //
         double mValue; //
         string mComment; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SLHAblock SLHAblock;
      #else
      class SLHAblock  {
         public:
         //friend XX;
         vector< ::SLHAline > mlines; //the vector containing the SLHAline objects
         string mblockname; //the name of the block
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SLHAfile SLHAfile;
      #else
      class SLHAfile  {
         public:
         //friend XX;
         vector< ::SLHAblock > mblocks; //the vector containing the collection of blocks
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SLHAline_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SLHAline_Dictionary();
   static void *new_SLHAline(void *p = 0);
   static void *newArray_SLHAline(Long_t size, void *p);
   static void delete_SLHAline(void *p);
   static void deleteArray_SLHAline(void *p);
   static void destruct_SLHAline(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SLHAline*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SLHAline) == sizeof(::ROOT::Shadow::SLHAline));
      ::SLHAline *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SLHAline),0);
      static ::ROOT::TGenericClassInfo 
         instance("SLHAline", "./../inc/SLHAline.hh", 22,
                  typeid(::SLHAline), DefineBehavior(ptr, ptr),
                  &SLHAline_ShowMembers, &SLHAline_Dictionary, isa_proxy, 4,
                  sizeof(::SLHAline) );
      instance.SetNew(&new_SLHAline);
      instance.SetNewArray(&newArray_SLHAline);
      instance.SetDelete(&delete_SLHAline);
      instance.SetDeleteArray(&deleteArray_SLHAline);
      instance.SetDestructor(&destruct_SLHAline);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SLHAline*)
   {
      return GenerateInitInstanceLocal((::SLHAline*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SLHAline*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SLHAline_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SLHAline*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SLHAblock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SLHAblock_Dictionary();
   static void *new_SLHAblock(void *p = 0);
   static void *newArray_SLHAblock(Long_t size, void *p);
   static void delete_SLHAblock(void *p);
   static void deleteArray_SLHAblock(void *p);
   static void destruct_SLHAblock(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SLHAblock*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SLHAblock) == sizeof(::ROOT::Shadow::SLHAblock));
      ::SLHAblock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SLHAblock),0);
      static ::ROOT::TGenericClassInfo 
         instance("SLHAblock", "./../inc/SLHAblock.hh", 10,
                  typeid(::SLHAblock), DefineBehavior(ptr, ptr),
                  &SLHAblock_ShowMembers, &SLHAblock_Dictionary, isa_proxy, 4,
                  sizeof(::SLHAblock) );
      instance.SetNew(&new_SLHAblock);
      instance.SetNewArray(&newArray_SLHAblock);
      instance.SetDelete(&delete_SLHAblock);
      instance.SetDeleteArray(&deleteArray_SLHAblock);
      instance.SetDestructor(&destruct_SLHAblock);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SLHAblock*)
   {
      return GenerateInitInstanceLocal((::SLHAblock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SLHAblock*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SLHAblock_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SLHAblock*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SLHAfile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SLHAfile_Dictionary();
   static void *new_SLHAfile(void *p = 0);
   static void *newArray_SLHAfile(Long_t size, void *p);
   static void delete_SLHAfile(void *p);
   static void deleteArray_SLHAfile(void *p);
   static void destruct_SLHAfile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SLHAfile*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SLHAfile) == sizeof(::ROOT::Shadow::SLHAfile));
      ::SLHAfile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SLHAfile),0);
      static ::ROOT::TGenericClassInfo 
         instance("SLHAfile", "./../inc/SLHAfile.hh", 14,
                  typeid(::SLHAfile), DefineBehavior(ptr, ptr),
                  &SLHAfile_ShowMembers, &SLHAfile_Dictionary, isa_proxy, 4,
                  sizeof(::SLHAfile) );
      instance.SetNew(&new_SLHAfile);
      instance.SetNewArray(&newArray_SLHAfile);
      instance.SetDelete(&delete_SLHAfile);
      instance.SetDeleteArray(&deleteArray_SLHAfile);
      instance.SetDestructor(&destruct_SLHAfile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SLHAfile*)
   {
      return GenerateInitInstanceLocal((::SLHAfile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SLHAfile*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SLHAfile_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SLHAfile*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void SLHAline_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SLHAline.
      typedef ::ROOT::Shadow::SLHAline ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SLHAline*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mIndexInfo", &sobj->mIndexInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mValue", &sobj->mValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mComment", (void*)&sobj->mComment);
      R__insp.InspectMember("string", (void*)&sobj->mComment, "mComment.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SLHAline(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAline : new ::SLHAline;
   }
   static void *newArray_SLHAline(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAline[nElements] : new ::SLHAline[nElements];
   }
   // Wrapper around operator delete
   static void delete_SLHAline(void *p) {
      delete ((::SLHAline*)p);
   }
   static void deleteArray_SLHAline(void *p) {
      delete [] ((::SLHAline*)p);
   }
   static void destruct_SLHAline(void *p) {
      typedef ::SLHAline current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SLHAline

//______________________________________________________________________________
namespace ROOT {
   void SLHAblock_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SLHAblock.
      typedef ::ROOT::Shadow::SLHAblock ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SLHAblock*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mlines", (void*)&sobj->mlines);
      R__insp.InspectMember("vector<SLHAline>", (void*)&sobj->mlines, "mlines.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mblockname", (void*)&sobj->mblockname);
      R__insp.InspectMember("string", (void*)&sobj->mblockname, "mblockname.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SLHAblock(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAblock : new ::SLHAblock;
   }
   static void *newArray_SLHAblock(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAblock[nElements] : new ::SLHAblock[nElements];
   }
   // Wrapper around operator delete
   static void delete_SLHAblock(void *p) {
      delete ((::SLHAblock*)p);
   }
   static void deleteArray_SLHAblock(void *p) {
      delete [] ((::SLHAblock*)p);
   }
   static void destruct_SLHAblock(void *p) {
      typedef ::SLHAblock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SLHAblock

//______________________________________________________________________________
namespace ROOT {
   void SLHAfile_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SLHAfile.
      typedef ::ROOT::Shadow::SLHAfile ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SLHAfile*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mblocks", (void*)&sobj->mblocks);
      R__insp.InspectMember("vector<SLHAblock>", (void*)&sobj->mblocks, "mblocks.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SLHAfile(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAfile : new ::SLHAfile;
   }
   static void *newArray_SLHAfile(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SLHAfile[nElements] : new ::SLHAfile[nElements];
   }
   // Wrapper around operator delete
   static void delete_SLHAfile(void *p) {
      delete ((::SLHAfile*)p);
   }
   static void deleteArray_SLHAfile(void *p) {
      delete [] ((::SLHAfile*)p);
   }
   static void destruct_SLHAfile(void *p) {
      typedef ::SLHAfile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SLHAfile

namespace ROOT {
   void vectorlESLHAblockgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESLHAblockgR_Dictionary();
   static void *new_vectorlESLHAblockgR(void *p = 0);
   static void *newArray_vectorlESLHAblockgR(Long_t size, void *p);
   static void delete_vectorlESLHAblockgR(void *p);
   static void deleteArray_vectorlESLHAblockgR(void *p);
   static void destruct_vectorlESLHAblockgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SLHAblock>*)
   {
      vector<SLHAblock> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SLHAblock>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SLHAblock>", -2, "/home/hyper/CERN/root_v5_32_01/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SLHAblock>), DefineBehavior(ptr, ptr),
                  0, &vectorlESLHAblockgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SLHAblock>) );
      instance.SetNew(&new_vectorlESLHAblockgR);
      instance.SetNewArray(&newArray_vectorlESLHAblockgR);
      instance.SetDelete(&delete_vectorlESLHAblockgR);
      instance.SetDeleteArray(&deleteArray_vectorlESLHAblockgR);
      instance.SetDestructor(&destruct_vectorlESLHAblockgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SLHAblock> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SLHAblock>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESLHAblockgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SLHAblock>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESLHAblockgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SLHAblock> : new vector<SLHAblock>;
   }
   static void *newArray_vectorlESLHAblockgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SLHAblock>[nElements] : new vector<SLHAblock>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESLHAblockgR(void *p) {
      delete ((vector<SLHAblock>*)p);
   }
   static void deleteArray_vectorlESLHAblockgR(void *p) {
      delete [] ((vector<SLHAblock>*)p);
   }
   static void destruct_vectorlESLHAblockgR(void *p) {
      typedef vector<SLHAblock> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SLHAblock>

namespace ROOT {
   void vectorlESLHAlinegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESLHAlinegR_Dictionary();
   static void *new_vectorlESLHAlinegR(void *p = 0);
   static void *newArray_vectorlESLHAlinegR(Long_t size, void *p);
   static void delete_vectorlESLHAlinegR(void *p);
   static void deleteArray_vectorlESLHAlinegR(void *p);
   static void destruct_vectorlESLHAlinegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SLHAline>*)
   {
      vector<SLHAline> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SLHAline>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SLHAline>", -2, "/home/hyper/CERN/root_v5_32_01/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SLHAline>), DefineBehavior(ptr, ptr),
                  0, &vectorlESLHAlinegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SLHAline>) );
      instance.SetNew(&new_vectorlESLHAlinegR);
      instance.SetNewArray(&newArray_vectorlESLHAlinegR);
      instance.SetDelete(&delete_vectorlESLHAlinegR);
      instance.SetDeleteArray(&deleteArray_vectorlESLHAlinegR);
      instance.SetDestructor(&destruct_vectorlESLHAlinegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SLHAline> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SLHAline>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESLHAlinegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SLHAline>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESLHAlinegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SLHAline> : new vector<SLHAline>;
   }
   static void *newArray_vectorlESLHAlinegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SLHAline>[nElements] : new vector<SLHAline>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESLHAlinegR(void *p) {
      delete ((vector<SLHAline>*)p);
   }
   static void deleteArray_vectorlESLHAlinegR(void *p) {
      delete [] ((vector<SLHAline>*)p);
   }
   static void destruct_vectorlESLHAlinegR(void *p) {
      typedef vector<SLHAline> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SLHAline>

/********************************************************
* output.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableoutput();

extern "C" void G__set_cpp_environmentoutput() {
  G__cpp_reset_tagtableoutput();
}
#include <new>
extern "C" int G__cpp_dllrevoutput() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SLHAline */
static int G__output_162_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAline* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAline[n];
     } else {
       p = new((void*) gvp) SLHAline[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAline;
     } else {
       p = new((void*) gvp) SLHAline;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAline*) G__getstructoffset())->GetNumIndices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetNumIndices((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAline*) G__getstructoffset())->GetIndex1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetIndex1((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAline*) G__getstructoffset())->GetIndex2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetIndex2((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAline*) G__getstructoffset())->GetFullIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetFullIndex((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SLHAline*) G__getstructoffset())->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetValue((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const SLHAline*) G__getstructoffset())->GetComment();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_162_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAline*) G__getstructoffset())->SetComment(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__output_162_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SLHAline* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SLHAline(*(SLHAline*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAline));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SLHAline G__TSLHAline;
static int G__output_162_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SLHAline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SLHAline*) (soff+(sizeof(SLHAline)*i)))->~G__TSLHAline();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SLHAline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SLHAline*) (soff))->~G__TSLHAline();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__output_162_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAline* dest = (SLHAline*) G__getstructoffset();
   *dest = *(SLHAline*) libp->para[0].ref;
   const SLHAline& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SLHAblock */
static int G__output_163_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAblock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAblock[n];
     } else {
       p = new((void*) gvp) SLHAblock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAblock;
     } else {
       p = new((void*) gvp) SLHAblock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAblock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAblock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SLHAblock(*((string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) SLHAblock(*((string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAblock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAblock*) G__getstructoffset())->SetBlockName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAblock*) G__getstructoffset())->AddLine(*((SLHAline*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAblock*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAblock*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SLHAline* pobj;
         const SLHAline xobj = ((const SLHAblock*) G__getstructoffset())->FindComment(*((string*) G__int(libp->para[0])));
         pobj = new SLHAline(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SLHAline* pobj;
         const SLHAline xobj = ((const SLHAblock*) G__getstructoffset())->FindIndex(*((pair<UInt_t,UInt_t>*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1]));
         pobj = new SLHAline(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const SLHAblock*) G__getstructoffset())->GetBlockName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_163_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SLHAline* pobj;
         const SLHAline xobj = ((const SLHAblock*) G__getstructoffset())->GetLine((unsigned int) G__int(libp->para[0]));
         pobj = new SLHAline(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__output_163_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SLHAblock* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SLHAblock(*(SLHAblock*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAblock));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SLHAblock G__TSLHAblock;
static int G__output_163_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SLHAblock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SLHAblock*) (soff+(sizeof(SLHAblock)*i)))->~G__TSLHAblock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SLHAblock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SLHAblock*) (soff))->~G__TSLHAblock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__output_163_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAblock* dest = (SLHAblock*) G__getstructoffset();
   *dest = *(SLHAblock*) libp->para[0].ref;
   const SLHAblock& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SLHAfile */
static int G__output_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAfile* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAfile[n];
     } else {
       p = new((void*) gvp) SLHAfile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SLHAfile;
     } else {
       p = new((void*) gvp) SLHAfile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAfile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAfile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SLHAfile(*((string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) SLHAfile(*((string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAfile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAfile*) G__getstructoffset())->AddBlock(*((SLHAblock*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((SLHAfile*) G__getstructoffset())->ReadFile(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((SLHAfile*) G__getstructoffset())->ReadFile(*((string*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((SLHAfile*) G__getstructoffset())->ReadStream(*(istream*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((SLHAfile*) G__getstructoffset())->ReadStream(*(istream*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SLHAfile*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SLHAblock* pobj;
         const SLHAblock xobj = ((const SLHAfile*) G__getstructoffset())->GetBlock((unsigned int) G__int(libp->para[0]));
         pobj = new SLHAblock(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SLHAfile*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SLHAblock* pobj;
         const SLHAblock xobj = ((const SLHAfile*) G__getstructoffset())->operator[](*((string*) G__int(libp->para[0])));
         pobj = new SLHAblock(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const stringstream& obj = ((SLHAfile*) G__getstructoffset())->streamer(*(stringstream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__output_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SLHAfile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SLHAfile(*(SLHAfile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__outputLN_SLHAfile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SLHAfile G__TSLHAfile;
static int G__output_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SLHAfile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SLHAfile*) (soff+(sizeof(SLHAfile)*i)))->~G__TSLHAfile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SLHAfile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SLHAfile*) (soff))->~G__TSLHAfile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__output_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SLHAfile* dest = (SLHAfile*) G__getstructoffset();
   *dest = *(SLHAfile*) libp->para[0].ref;
   const SLHAfile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__output__0_1290(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(SLHAline*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output__0_1359(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(SLHAblock*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output__0_1428(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = operator<<(*(ostream*) libp->para[0].ref, *(SLHAfile*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__output__0_1429(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const istream& obj = operator>>(*(istream*) libp->para[0].ref, *(SLHAfile*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* SLHAline */

/* SLHAblock */

/* SLHAfile */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncoutput {
 public:
  G__Sizep2memfuncoutput(): p(&G__Sizep2memfuncoutput::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncoutput::*p)();
};

size_t G__get_sizep2memfuncoutput()
{
  G__Sizep2memfuncoutput a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceoutput() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableoutput() {

   /* Setting up typedef entry */
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,UInt_t>",117,G__get_linked_tagnum(&G__outputLN_pairlEunsignedsPintcOunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SLHAline>",117,G__get_linked_tagnum(&G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlESLHAlinecOallocatorlESLHAlinegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlESLHAlinecOallocatorlESLHAlinegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SLHAblock>",117,G__get_linked_tagnum(&G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlESLHAblockcOallocatorlESLHAblockgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__outputLN_reverse_iteratorlEvectorlESLHAblockcOallocatorlESLHAblockgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SLHAline */
static void G__setup_memvarSLHAline(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__outputLN_SLHAline));
   { SLHAline *p; p=(SLHAline*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"mIndexInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"mValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__outputLN_string),-1,-1,4,"mComment=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SLHAblock */
static void G__setup_memvarSLHAblock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__outputLN_SLHAblock));
   { SLHAblock *p; p=(SLHAblock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR),G__defined_typename("vector<SLHAline>"),-1,4,"mlines=",0,"the vector containing the SLHAline objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__outputLN_string),-1,-1,4,"mblockname=",0,"the name of the block");
   }
   G__tag_memvar_reset();
}


   /* SLHAfile */
static void G__setup_memvarSLHAfile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__outputLN_SLHAfile));
   { SLHAfile *p; p=(SLHAfile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR),G__defined_typename("vector<SLHAblock>"),-1,4,"mblocks=",0,"the vector containing the collection of blocks");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvaroutput() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSLHAline(void) {
   /* SLHAline */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__outputLN_SLHAline));
   G__memfunc_setup("SLHAline",720,G__output_162_0_1, 105, G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumIndices",1295,G__output_162_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "since read-only function", (void*) NULL, 0);
   G__memfunc_setup("SetNumIndices",1307,G__output_162_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex1",841,G__output_162_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("SetIndex1",853,G__output_162_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex2",842,G__output_162_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("SetIndex2",854,G__output_162_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFullIndex",1195,G__output_162_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("SetFullIndex",1207,G__output_162_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__output_162_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("SetValue",809,G__output_162_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComment",1011,G__output_162_0_12, 117, G__get_linked_tagnum(&G__outputLN_string), -1, 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("SetComment",1023,G__output_162_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SLHAline", 720, G__output_162_0_14, (int) ('i'), G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 0, 1, 1, 1, 0, "u 'SLHAline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SLHAline", 846, G__output_162_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__output_162_0_16, (int) ('u'), G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 1, 1, 1, 1, 0, "u 'SLHAline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSLHAblock(void) {
   /* SLHAblock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__outputLN_SLHAblock));
   G__memfunc_setup("SLHAblock",819,G__output_163_0_1, 105, G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SLHAblock",819,G__output_163_0_2, 105, G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", "constructor setting the blockname directly", (void*) NULL, 0);
   G__memfunc_setup("SetBlockName",1176,G__output_163_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLine",657,G__output_163_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SLHAline' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__output_163_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "resets the private members", (void*) NULL, 0);
   G__memfunc_setup("size",443,G__output_163_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("FindComment",1108,G__output_163_0_7, 117, G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 0, 1, 1, 1, 8, "u 'string' - 0 - -", "read-only", (void*) NULL, 0);
   G__memfunc_setup("FindIndex",889,G__output_163_0_8, 117, G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 0, 2, 1, 1, 8, 
"u 'pair<unsigned int,unsigned int>' 'pair<UInt_t,UInt_t>' 0 - - h - 'UInt_t' 0 - -", "read-only", (void*) NULL, 0);
   G__memfunc_setup("GetBlockName",1164,G__output_163_0_9, 117, G__get_linked_tagnum(&G__outputLN_string), -1, 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__output_163_0_10, 117, G__get_linked_tagnum(&G__outputLN_SLHAline), -1, 0, 1, 1, 1, 8, "h - - 0 - -", "read-only", (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SLHAblock", 819, G__output_163_0_11, (int) ('i'), G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 0, 1, 1, 1, 0, "u 'SLHAblock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SLHAblock", 945, G__output_163_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__output_163_0_13, (int) ('u'), G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 1, 1, 1, 1, 0, "u 'SLHAblock' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSLHAfile(void) {
   /* SLHAfile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__outputLN_SLHAfile));
   G__memfunc_setup("SLHAfile",712,G__output_169_0_1, 105, G__get_linked_tagnum(&G__outputLN_SLHAfile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SLHAfile",712,G__output_169_0_2, 105, G__get_linked_tagnum(&G__outputLN_SLHAfile), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", "constructor which reads file name of SLHA file", (void*) NULL, 0);
   G__memfunc_setup("AddBlock",756,G__output_169_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SLHAblock' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFile",764,G__output_169_0_4, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - - g - - 0 'false' mVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadStream",1000,G__output_169_0_5, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - - g - - 0 'false' mVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__output_169_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", "read-only", (void*) NULL, 0);
   G__memfunc_setup("GetBlock",779,G__output_169_0_7, 117, G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 0, 1, 1, 1, 8, "h - - 0 - -", "read-only", (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__output_169_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__output_169_0_9, 117, G__get_linked_tagnum(&G__outputLN_SLHAblock), -1, 0, 1, 1, 1, 8, "u 'string' - 0 - -", "read-only - to allow easy search of blocknames", (void*) NULL, 0);
   G__memfunc_setup("streamer",867,G__output_169_0_10, 117, G__get_linked_tagnum(&G__outputLN_basic_stringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR), G__defined_typename("stringstream"), 1, 1, 1, 1, 0, "u 'basic_stringstream<char,char_traits<char>,allocator<char> >' 'stringstream' 1 - ss", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SLHAfile", 712, G__output_169_0_11, (int) ('i'), G__get_linked_tagnum(&G__outputLN_SLHAfile), -1, 0, 1, 1, 1, 0, "u 'SLHAfile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SLHAfile", 838, G__output_169_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__output_169_0_13, (int) ('u'), G__get_linked_tagnum(&G__outputLN_SLHAfile), -1, 1, 1, 1, 1, 0, "u 'SLHAfile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncoutput() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaloutput() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
   G__memfunc_setup("operator<<", 996, G__output__0_1290, 117, G__get_linked_tagnum(&G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'SLHAline' - 11 - sl", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func13() {
   G__memfunc_setup("operator<<", 996, G__output__0_1359, 117, G__get_linked_tagnum(&G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'SLHAblock' - 11 - block", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func14() {
   G__memfunc_setup("operator<<", 996, G__output__0_1428, 117, G__get_linked_tagnum(&G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os u 'SLHAfile' - 11 - file", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>>", 1000, G__output__0_1429, 117, G__get_linked_tagnum(&G__outputLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 1, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - is u 'SLHAfile' - 1 - file", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcoutput() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__outputLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__outputLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__outputLN_basic_stringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR = { "basic_stringstream<char,char_traits<char>,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__outputLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__outputLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__outputLN_SLHAline = { "SLHAline" , 99 , -1 };
G__linked_taginfo G__outputLN_SLHAblock = { "SLHAblock" , 99 , -1 };
G__linked_taginfo G__outputLN_pairlEunsignedsPintcOunsignedsPintgR = { "pair<unsigned int,unsigned int>" , 115 , -1 };
G__linked_taginfo G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR = { "vector<SLHAline,allocator<SLHAline> >" , 99 , -1 };
G__linked_taginfo G__outputLN_reverse_iteratorlEvectorlESLHAlinecOallocatorlESLHAlinegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SLHAline,allocator<SLHAline> >::iterator>" , 99 , -1 };
G__linked_taginfo G__outputLN_SLHAfile = { "SLHAfile" , 99 , -1 };
G__linked_taginfo G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR = { "vector<SLHAblock,allocator<SLHAblock> >" , 99 , -1 };
G__linked_taginfo G__outputLN_reverse_iteratorlEvectorlESLHAblockcOallocatorlESLHAblockgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SLHAblock,allocator<SLHAblock> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableoutput() {
  G__outputLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__outputLN_string.tagnum = -1 ;
  G__outputLN_basic_stringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__outputLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__outputLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__outputLN_SLHAline.tagnum = -1 ;
  G__outputLN_SLHAblock.tagnum = -1 ;
  G__outputLN_pairlEunsignedsPintcOunsignedsPintgR.tagnum = -1 ;
  G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR.tagnum = -1 ;
  G__outputLN_reverse_iteratorlEvectorlESLHAlinecOallocatorlESLHAlinegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__outputLN_SLHAfile.tagnum = -1 ;
  G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR.tagnum = -1 ;
  G__outputLN_reverse_iteratorlEvectorlESLHAblockcOallocatorlESLHAblockgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableoutput() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__outputLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_string);
   G__get_linked_tagnum_fwd(&G__outputLN_basic_stringstreamlEcharcOchar_traitslEchargRcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__outputLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__outputLN_SLHAline),sizeof(SLHAline),-1,263424,(char*)NULL,G__setup_memvarSLHAline,G__setup_memfuncSLHAline);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__outputLN_SLHAblock),sizeof(SLHAblock),-1,296192,(char*)NULL,G__setup_memvarSLHAblock,G__setup_memfuncSLHAblock);
   G__get_linked_tagnum_fwd(&G__outputLN_pairlEunsignedsPintcOunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__outputLN_vectorlESLHAlinecOallocatorlESLHAlinegRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_reverse_iteratorlEvectorlESLHAlinecOallocatorlESLHAlinegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__outputLN_SLHAfile),sizeof(SLHAfile),-1,296192,(char*)NULL,G__setup_memvarSLHAfile,G__setup_memfuncSLHAfile);
   G__get_linked_tagnum_fwd(&G__outputLN_vectorlESLHAblockcOallocatorlESLHAblockgRsPgR);
   G__get_linked_tagnum_fwd(&G__outputLN_reverse_iteratorlEvectorlESLHAblockcOallocatorlESLHAblockgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupoutput(void) {
  G__check_setup_version(30051515,"G__cpp_setupoutput()");
  G__set_cpp_environmentoutput();
  G__cpp_setup_tagtableoutput();

  G__cpp_setup_inheritanceoutput();

  G__cpp_setup_typetableoutput();

  G__cpp_setup_memvaroutput();

  G__cpp_setup_memfuncoutput();
  G__cpp_setup_globaloutput();
  G__cpp_setup_funcoutput();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncoutput();
  return;
}
class G__cpp_setup_initoutput {
  public:
    G__cpp_setup_initoutput() { G__add_setup_func("output",(G__incsetup)(&G__cpp_setupoutput)); G__call_setup_funcs(); }
   ~G__cpp_setup_initoutput() { G__remove_setup_func("output"); }
};
G__cpp_setup_initoutput G__cpp_setup_initializeroutput;

